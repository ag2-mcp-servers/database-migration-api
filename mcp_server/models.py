# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:45:00+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class CancelOperationRequest(BaseModel):
    pass


class ActivationPolicy(Enum):
    SQL_ACTIVATION_POLICY_UNSPECIFIED = 'SQL_ACTIVATION_POLICY_UNSPECIFIED'
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class DataDiskType(Enum):
    SQL_DATA_DISK_TYPE_UNSPECIFIED = 'SQL_DATA_DISK_TYPE_UNSPECIFIED'
    PD_SSD = 'PD_SSD'
    PD_HDD = 'PD_HDD'


class DatabaseVersion(Enum):
    SQL_DATABASE_VERSION_UNSPECIFIED = 'SQL_DATABASE_VERSION_UNSPECIFIED'
    MYSQL_5_6 = 'MYSQL_5_6'
    MYSQL_5_7 = 'MYSQL_5_7'
    MYSQL_8_0 = 'MYSQL_8_0'


class Provider(Enum):
    DATABASE_PROVIDER_UNSPECIFIED = 'DATABASE_PROVIDER_UNSPECIFIED'
    CLOUDSQL = 'CLOUDSQL'
    RDS = 'RDS'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    CREATING = 'CREATING'
    READY = 'READY'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    FAILED = 'FAILED'


class Engine(Enum):
    DATABASE_ENGINE_UNSPECIFIED = 'DATABASE_ENGINE_UNSPECIFIED'
    MYSQL = 'MYSQL'


class DatabaseType(BaseModel):
    engine: Optional[Engine] = Field(None, description='The database engine.')
    provider: Optional[Provider] = Field(None, description='The database provider.')


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GoogleCloudClouddmsV1beta1OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class Phase(Enum):
    PHASE_UNSPECIFIED = 'PHASE_UNSPECIFIED'
    FULL_DUMP = 'FULL_DUMP'
    CDC = 'CDC'
    PROMOTE_IN_PROGRESS = 'PROMOTE_IN_PROGRESS'
    WAITING_FOR_SOURCE_WRITES_TO_STOP = 'WAITING_FOR_SOURCE_WRITES_TO_STOP'
    PREPARING_THE_DUMP = 'PREPARING_THE_DUMP'


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    MAINTENANCE = 'MAINTENANCE'
    DRAFT = 'DRAFT'
    CREATING = 'CREATING'
    NOT_STARTED = 'NOT_STARTED'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    DELETING = 'DELETING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    DELETED = 'DELETED'
    UPDATING = 'UPDATING'
    STARTING = 'STARTING'
    RESTARTING = 'RESTARTING'
    RESUMING = 'RESUMING'


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    ONE_TIME = 'ONE_TIME'
    CONTINUOUS = 'CONTINUOUS'


class ErrorCode(Enum):
    ERROR_CODE_UNSPECIFIED = 'ERROR_CODE_UNSPECIFIED'
    CONNECTION_FAILURE = 'CONNECTION_FAILURE'
    AUTHENTICATION_FAILURE = 'AUTHENTICATION_FAILURE'
    INVALID_CONNECTION_PROFILE_CONFIG = 'INVALID_CONNECTION_PROFILE_CONFIG'
    VERSION_INCOMPATIBILITY = 'VERSION_INCOMPATIBILITY'
    CONNECTION_PROFILE_TYPES_INCOMPATIBILITY = (
        'CONNECTION_PROFILE_TYPES_INCOMPATIBILITY'
    )
    UNSUPPORTED_GTID_MODE = 'UNSUPPORTED_GTID_MODE'
    UNSUPPORTED_DEFINER = 'UNSUPPORTED_DEFINER'
    CANT_RESTART_RUNNING_MIGRATION = 'CANT_RESTART_RUNNING_MIGRATION'
    TABLES_WITH_LIMITED_SUPPORT = 'TABLES_WITH_LIMITED_SUPPORT'
    UNSUPPORTED_DATABASE_LOCALE = 'UNSUPPORTED_DATABASE_LOCALE'
    UNSUPPORTED_DATABASE_FDW_CONFIG = 'UNSUPPORTED_DATABASE_FDW_CONFIG'
    ERROR_RDBMS = 'ERROR_RDBMS'


class MigrationJobVerificationError(BaseModel):
    errorCode: Optional[ErrorCode] = Field(
        None,
        description='Output only. An instance of ErrorCode specifying the error that occurred.',
    )
    errorDetailMessage: Optional[str] = Field(
        None,
        description='Output only. A specific detailed error message, if supplied by the engine.',
    )
    errorMessage: Optional[str] = Field(
        None,
        description='Output only. A formatted message with further details about the error and a CTA.',
    )


class PromoteMigrationJobRequest(BaseModel):
    pass


class RestartMigrationJobRequest(BaseModel):
    pass


class ResumeMigrationJobRequest(BaseModel):
    pass


class ReverseSshConnectivity(BaseModel):
    vm: Optional[str] = Field(
        None,
        description='The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.',
    )
    vmIp: Optional[str] = Field(
        None,
        description='Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.',
    )
    vmPort: Optional[int] = Field(
        None,
        description='Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.',
    )
    vpc: Optional[str] = Field(
        None,
        description='The name of the VPC to peer with the Cloud SQL private network.',
    )


class SqlAclEntry(BaseModel):
    expireTime: Optional[str] = Field(
        None,
        description='The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.',
    )
    label: Optional[str] = Field(None, description='A label to identify this entry.')
    ttl: Optional[str] = Field(
        None, description='Input only. The time-to-leave of this access control entry.'
    )
    value: Optional[str] = Field(
        None, description='The allowlisted value for the access control list.'
    )


class SqlIpConfig(BaseModel):
    authorizedNetworks: Optional[List[SqlAclEntry]] = Field(
        None,
        description="The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).",
    )
    enableIpv4: Optional[bool] = Field(
        None, description='Whether the instance is assigned a public IP address or not.'
    )
    privateNetwork: Optional[str] = Field(
        None,
        description='The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.',
    )
    requireSsl: Optional[bool] = Field(
        None, description='Whether SSL connections over IP should be enforced or not.'
    )


class SshScript(BaseModel):
    script: Optional[str] = Field(None, description='The ssh configuration script.')


class Type1(Enum):
    SSL_TYPE_UNSPECIFIED = 'SSL_TYPE_UNSPECIFIED'
    SERVER_ONLY = 'SERVER_ONLY'
    SERVER_CLIENT = 'SERVER_CLIENT'


class SslConfig(BaseModel):
    caCertificate: Optional[str] = Field(
        None,
        description="Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.",
    )
    clientCertificate: Optional[str] = Field(
        None,
        description="Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.",
    )
    clientKey: Optional[str] = Field(
        None,
        description="Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.",
    )
    type: Optional[Type1] = Field(
        None,
        description="Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.",
    )


class StartMigrationJobRequest(BaseModel):
    pass


class StaticIpConnectivity(BaseModel):
    pass


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class StopMigrationJobRequest(BaseModel):
    pass


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class VerifyMigrationJobRequest(BaseModel):
    pass


class VmCreationConfig(BaseModel):
    subnet: Optional[str] = Field(
        None, description='The subnet name the vm needs to be created in.'
    )
    vmMachineType: Optional[str] = Field(
        None, description='Required. VM instance machine type to create.'
    )
    vmZone: Optional[str] = Field(
        None, description='The Google Cloud Platform zone to create the VM in.'
    )


class VmSelectionConfig(BaseModel):
    vmZone: Optional[str] = Field(
        None, description='Required. The Google Cloud Platform zone the VM is located.'
    )


class VpcPeeringConnectivity(BaseModel):
    vpc: Optional[str] = Field(
        None,
        description='The name of the VPC network to peer with the Cloud SQL private network.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class CloudSqlSettings(BaseModel):
    activationPolicy: Optional[ActivationPolicy] = Field(
        None,
        description="The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.",
    )
    autoStorageIncrease: Optional[bool] = Field(
        None,
        description='[default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.',
    )
    dataDiskSizeGb: Optional[str] = Field(
        None,
        description='The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.',
    )
    dataDiskType: Optional[DataDiskType] = Field(
        None, description='The type of storage: `PD_SSD` (default) or `PD_HDD`.'
    )
    databaseFlags: Optional[Dict[str, str]] = Field(
        None,
        description='The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.',
    )
    databaseVersion: Optional[DatabaseVersion] = Field(
        None, description='The database engine type and version.'
    )
    ipConfig: Optional[SqlIpConfig] = Field(
        None,
        description='The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled.',
    )
    rootPassword: Optional[str] = Field(
        None, description='Input only. Initial root password.'
    )
    rootPasswordSet: Optional[bool] = Field(
        None,
        description='Output only. Indicates If this connection profile root password is stored.',
    )
    sourceId: Optional[str] = Field(
        None,
        description='The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`',
    )
    storageAutoResizeLimit: Optional[str] = Field(
        None,
        description='The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.',
    )
    tier: Optional[str] = Field(
        None,
        description='The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).',
    )
    userLabels: Optional[Dict[str, str]] = Field(
        None,
        description='The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.',
    )
    zone: Optional[str] = Field(
        None,
        description='The Google Cloud Platform zone where your Cloud SQL database instance is located.',
    )


class GenerateSshScriptRequest(BaseModel):
    vm: Optional[str] = Field(
        None, description='Required. Bastion VM Instance name to use or to create.'
    )
    vmCreationConfig: Optional[VmCreationConfig] = Field(
        None, description='The VM creation configuration'
    )
    vmPort: Optional[int] = Field(
        None, description='The port that will be open on the bastion host'
    )
    vmSelectionConfig: Optional[VmSelectionConfig] = Field(
        None, description='The VM selection configuration'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class MigrationJob(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".',
    )
    destination: Optional[str] = Field(
        None,
        description='Required. The resource name (URI) of the destination connection profile.',
    )
    destinationDatabase: Optional[DatabaseType] = Field(
        None, description='The database engine type and provider of the destination.'
    )
    displayName: Optional[str] = Field(
        None, description='The migration job display name.'
    )
    dumpPath: Optional[str] = Field(
        None,
        description='The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).',
    )
    duration: Optional[str] = Field(
        None,
        description='Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s".',
    )
    endTime: Optional[str] = Field(
        None,
        description='Output only. If the migration job is completed, the time when it was completed.',
    )
    error: Optional[Status] = Field(
        None, description='Output only. The error details in case of state FAILED.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.',
    )
    name: Optional[str] = Field(
        None,
        description='The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.',
    )
    phase: Optional[Phase] = Field(
        None, description='Output only. The current migration job phase.'
    )
    reverseSshConnectivity: Optional[ReverseSshConnectivity] = Field(
        None,
        description='The details needed to communicate to the source over Reverse SSH tunnel connectivity.',
    )
    source: Optional[str] = Field(
        None,
        description='Required. The resource name (URI) of the source connection profile.',
    )
    sourceDatabase: Optional[DatabaseType] = Field(
        None, description='The database engine type and provider of the source.'
    )
    state: Optional[State1] = Field(
        None, description='The current migration job state.'
    )
    staticIpConnectivity: Optional[StaticIpConnectivity] = Field(
        None,
        description='static ip connectivity data (default, no additional details needed).',
    )
    type: Optional[Type] = Field(None, description='Required. The migration job type.')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".',
    )
    vpcPeeringConnectivity: Optional[VpcPeeringConnectivity] = Field(
        None,
        description='The details of the VPC network that the source database is located in.',
    )


class MySqlConnectionProfile(BaseModel):
    cloudSqlId: Optional[str] = Field(
        None,
        description='If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.',
    )
    host: Optional[str] = Field(
        None, description='Required. The IP or hostname of the source MySQL database.'
    )
    password: Optional[str] = Field(
        None,
        description='Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.',
    )
    passwordSet: Optional[bool] = Field(
        None,
        description='Output only. Indicates If this connection profile password is stored.',
    )
    port: Optional[int] = Field(
        None, description='Required. The network port of the source MySQL database.'
    )
    ssl: Optional[SslConfig] = Field(
        None,
        description='SSL configuration for the destination to connect to the source database.',
    )
    username: Optional[str] = Field(
        None,
        description='Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class CloudSqlConnectionProfile(BaseModel):
    cloudSqlId: Optional[str] = Field(
        None,
        description='Output only. The Cloud SQL instance ID that this connection profile is associated with.',
    )
    privateIp: Optional[str] = Field(
        None, description="Output only. The Cloud SQL database instance's private IP."
    )
    publicIp: Optional[str] = Field(
        None, description="Output only. The Cloud SQL database instance's public IP."
    )
    settings: Optional[CloudSqlSettings] = Field(
        None,
        description='Immutable. Metadata used to create the destination Cloud SQL database.',
    )


class ConnectionProfile(BaseModel):
    cloudsql: Optional[CloudSqlConnectionProfile] = Field(
        None, description='A CloudSQL database connection profile.'
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".',
    )
    displayName: Optional[str] = Field(
        None, description='The connection profile display name.'
    )
    error: Optional[Status] = Field(
        None, description='Output only. The error details in case of state FAILED.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.',
    )
    mysql: Optional[MySqlConnectionProfile] = Field(
        None, description='A MySQL database connection profile.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.',
    )
    provider: Optional[Provider] = Field(None, description='The database provider.')
    state: Optional[State] = Field(
        None,
        description='The current connection profile state (e.g. DRAFT, READY, or FAILED).',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".',
    )


class ListConnectionProfilesResponse(BaseModel):
    connectionProfiles: Optional[List[ConnectionProfile]] = Field(
        None, description='The response list of connection profiles.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListMigrationJobsResponse(BaseModel):
    migrationJobs: Optional[List[MigrationJob]] = Field(
        None, description='The list of migration jobs objects.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )
